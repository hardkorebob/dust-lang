// dust.dust - Bootstrapped
// Dust is ancient. Build with what doesn't decay.
// Build with Dust. Built to last.

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <stdbool.h>

enum DataType {
    TYPEVOID
    TYPEINT
    TYPEFLOAT
    TYPECHAR
    TYPESTRING
    TYPEPOINTER
    TYPEARRAY
    TYPEUSER
    TYPEFPTR
    TYPESIZET
    TYPEUINT8
    TYPEUINT16
    TYPEUINT32
    TYPEUINT64
    TYPEINT8
    TYPEINT16
    TYPEINT32
    TYPEINT64
    TYPEUINTPTR
    TYPEINTPTR
    TYPEOFF

    TYPEBOOL
}

enum SemanticRole {
	ROLEOWNED
  	ROLEBORROWED
  	ROLEREFERENCE
  	ROLERESTRICT
  	ROLENONE
}

struct Arena {
	data_s
	size_t
	used_t
}

struct SuffixInfo {
	type_DataType
	arrBasetype_DataType
	role_SemanticRole
	isConst_bl
	isStatic_bl
	isExtern_bl
	ptrLevel_i
	userTypename_cb
	arrUsertypename_cb
}

struct TypedefInfo {
	name_s
	typeInfo_SuffixInfo
}

struct TypeTable {
	typedefs_TypedefInfop
	structNames_cpp
	typeArena_Arena
	structCount_t
	structCap_t
	typedefCount_t
	typedefCap_t
}

struct SuffixMapping {
	suffix_cb
	isPtr_bl
	isConst_bl
	type_DataType
	role_SemanticRole
}

struct TypeMapping {
	type_DataType
	cType_cb
}

let typeMap_zkTypeMappinga[] = {
    {TYPEVOID,       "void"}
    {TYPEINT,        "int"}
    {TYPEFLOAT,      "float"}
    {TYPECHAR,       "char"}
    {TYPESTRING,     "char*"}
    {TYPESIZET,     "size_t"}, 
    {TYPEUINT8,      "uint8_t"}
    {TYPEUINT16,     "uint16_t"}
    {TYPEUINT32,     "uint32_t"}
    {TYPEUINT64,     "uint64_t"}
    {TYPEINT8,       "int8_t"}
    {TYPEINT16,      "int16_t"}
    {TYPEINT32,      "int32_t"}
    {TYPEINT64,      "int64_t"},   
    {TYPEUINTPTR,    "uintptr_t"}
    {TYPEINTPTR,     "intptr_t"}
    {TYPEOFF,        "off_t"}
    {TYPEBOOL,       "bool"}
    {TYPEVOID,       NULL}
}

let suffixTable_zkSuffixMappinga[] = {
//  suffix, DataType,    SemanticRole, isPtr, isConst
// ====================================================
    {"i",   TYPEINT,     ROLENONE,   false, false}
    {"f",   TYPEFLOAT,   ROLENONE,   false, false}
    {"c",   TYPECHAR,    ROLENONE,   false, false}
    {"s",   TYPESTRING,  ROLENONE,   false, false}
    {"v",   TYPEVOID,    ROLENONE,   false, false}
    {"bl",  TYPEBOOL,    ROLENONE,   false, false}
    {"t",   TYPESIZET,   ROLENONE,   false, false}
    {"fp",  TYPEFPTR,    ROLENONE,   false, false}
    {"u8",  TYPEUINT8,   ROLENONE,   false, false}
    {"u16", TYPEUINT16,  ROLENONE,   false, false}
    {"u32", TYPEUINT32,  ROLENONE,   false, false}
    {"u64", TYPEUINT64,  ROLENONE,   false, false}
    {"i8",  TYPEINT8,    ROLENONE,   false, false}
    {"i16", TYPEINT16,   ROLENONE,   false, false}
    {"i32", TYPEINT32,   ROLENONE,   false, false}
    {"i64", TYPEINT64,   ROLENONE,   false, false}
    {"ux",  TYPEUINTPTR, ROLENONE,   false, false}
    {"ix",  TYPEINTPTR,  ROLENONE,   false, false}
    {"off", TYPEOFF,     ROLENONE,   false, false}
    {NULL,  TYPEVOID,    ROLENONE,   false, false}
}



