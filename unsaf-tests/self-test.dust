// test_self_host.dust - Corrected version
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

struct Arena {
    data_cp
    size_t
    used_t
    thing_ipp
}

let g_arena_Arena

func arena_init_v(size_t) {
    g_arena_Arena.data_cp = malloc(size_t)
    g_arena_Arena.size_t = size_t
    g_arena_Arena.used_t = 0
}

func arena_alloc_vp(size_t) {
    size_t = (size_t + 7) & ~7
    
    if (g_arena_Arena.used_t + size_t > g_arena_Arena.size_t) {
        fprintf(stderr, "Arena out of memory\n")
        exit(1)
    }
    
    let ptr_vp = g_arena_Arena.data_cp + g_arena_Arena.used_t
    g_arena_Arena.used_t = g_arena_Arena.used_t + size_t
    return ptr_vp
}

func str_cmp_i(a_s, b_s) {
    let i_t = 0
    while (a_s[i_t] != '\0' && b_s[i_t] != '\0') {
        if (a_s[i_t] != b_s[i_t]) {
            return a_s[i_t] - b_s[i_t]
        }
        i_t = i_t + 1
    }
    return a_s[i_t] - b_s[i_t]
}

func emit_identifier_v(node_vp) {
    fprintf(stdout, "%s", cast_s(node_vp))
}

func emit_number_v(node_vp) {
    fprintf(stdout, "%s", cast_s(node_vp))
}

let emit_table_fpa[] = {
    emit_identifier_v 
    emit_number_v 
    null
    null
}

struct Lexer {
    source_s
    pos_i
    len_i
    line_i
}

func compile_i(source_s) {
    let lex_Lexerp = arena_alloc_vp(sizeof(Lexer))
    lex_Lexerp->source_s = source_s
    lex_Lexerp->pos_i = 0
    lex_Lexerp->len_i = strlen(source_s)
    lex_Lexerp->line_i = 1
    
    let token_count_i = 0
    
    while (lex_Lexerp->pos_i < lex_Lexerp->len_i) {
        let c_c = lex_Lexerp->source_s[lex_Lexerp->pos_i]
        
        if (isalpha(c_c)) {
            while (isalnum(lex_Lexerp->source_s[lex_Lexerp->pos_i])) {
                lex_Lexerp->pos_i = lex_Lexerp->pos_i + 1
            }
            token_count_i = token_count_i + 1
        } else if (isdigit(c_c)) {
            while (isdigit(lex_Lexerp->source_s[lex_Lexerp->pos_i])) {
                lex_Lexerp->pos_i = lex_Lexerp->pos_i + 1
            }
            token_count_i = token_count_i + 1
        } else {
            lex_Lexerp->pos_i = lex_Lexerp->pos_i + 1
        }
    }
    return token_count_i
}

func main_i() {
    arena_init_v(1024 * 1024)
    
    printf("Testing Dust compiler...\n");

    let test_s = "func test_i() { return 42 }"
    let tokens_i = compile_i(test_s)
    
    printf("Tokenized %d tokens\n", tokens_i)
    
    // FIX: Use correct variable name.
    if (emit_table_fpa[0] != null) {
        printf("Dispatch table initialized\n")
    }
    
    if (str_cmp_i("dust", "dust") == 0) {
        printf("String comparison works\n")
    }
    return 0
}
