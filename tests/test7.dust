// ===== test7.dust - DEFINITIVELY CORRECTED =====
#include <stdio.h>
#include <stdbool.h>

// --- Structs and User-Defined Types ---
struct Point {
    x_i;
    y_i;
};


func print_point_v(p_Pointb) {
    // The -> operator is correct for pointers.
    printf("Point(x: %d, y: %d)\n", p_Pointb->x, p_Pointb->y);
}


// --- Testing Switch, Case, and Fallthrough ---
func test_fallthrough_v(start_day_i) {
    printf("\n--- Testing Switch Fallthrough (starting from day %d) ---\n", start_day_i);
    switch (start_day_i) {
        case 1:
            printf("It's Monday. ");
        case 2:
            printf("It's a weekday. ");
        case 3:
            printf("Still a weekday. ");
            break;
        case 4:
            printf("Thursday. ");
        case 5:
            printf("End of the work week! ");
        case 6:
        case 7:
            printf("It's the weekend!\n");
            break;
        default:
            printf("Invalid day provided.\n");
    }
}


// --- Testing Control Flow ---
func test_control_flow_v() {
    printf("\n--- Testing Control Flow ---\n");
    
    let temperature_i = 25;
    if (temperature_i > 30) {
        printf("It's hot.\n");
    } else if (temperature_i > 20) {
        printf("It's warm.\n");
    } else {
        printf("It's cool.\n");
    }

    printf("For loop: ");
    for (let i_i = 0; i_i < 5; i_i = i_i + 1) {
        if (i_i == 3) {
            continue;
        }
        printf("%d ", i_i);
    }
    printf("\n");

    printf("While loop: ");
    let countdown_i = 3;
    while (countdown_i > 0) {
        printf("%d... ", countdown_i);
        countdown_i = countdown_i - 1;
    }
    printf("Lift off!\n");
    
    printf("Do-While loop: ");
    let num_i = 5;
    do {
        printf("%d ", num_i);
        num_i = num_i - 1;
    } while (num_i > 5);
    printf("\n");
}

// --- Testing Operators and Expressions ---
func test_operators_v() {
    printf("\n--- Testing Operators ---\n");
    let a_i = 10;
    let b_i = 4;
    printf("a = %d, b = %d\n", a_i, b_i);
    printf("a + b = %d\n", a_i + b_i);
    printf("a - b = %d\n", a_i - b_i);
    printf("a * b = %d\n", a_i * b_i);
    printf("a / b = %d\n", a_i / b_i);
    printf("a %% b = %d\n", a_i % b_i);
    
    let is_equal_bl = (a_i == 10);
    let is_not_equal_bl = (b_i != 4);
    if (is_equal_bl && !is_not_equal_bl) {
        printf("Logical operators work!\n");
    }
}


// --- Testing Pointers, Arrays, and sizeof ---
func test_memory_features_v() {
    printf("\n--- Testing Memory Features ---\n");

    let numbers_ia[5] = {10, 20, 30, 40, 50};
    printf("First number: %d\n", numbers_ia[0]);
    printf("Third number: %d\n", numbers_ia[2]);
    numbers_ia[2] = 35;
    printf("Modified third number: %d\n", numbers_ia[2]);

    printf("Size of int: %zu bytes\n", sizeof(let_i));
    printf("Size of Point struct: %zu bytes\n", sizeof(Point));
    printf("Size of numbers array: %zu bytes\n", sizeof(numbers_ia));
    
    // Pointers and Structs
    let my_point_Point = {100, 200};

    // FIX: The suffix is now _Pointp to correctly signify a pointer type.
    let point_ptr_Pointp = &my_point_Point;

    // Use the pointer to access the member
    printf("Access via pointer: %d\n", point_ptr_Point->x);
    
    // Demonstrate passing a pointer to the print function
    print_point_v(point_ptr_Pointp);
}


// --- Main Entry Point ---
func main_i() {
    printf("--- Comprehensive Language Test Suite ---\n");

    test_fallthrough_v(1);
    test_fallthrough_v(5);
    test_control_flow_v();
    test_operators_v();
    test_memory_features_v();

    printf("\n--- Test Suite Complete ---\n");
    return 0;
}
