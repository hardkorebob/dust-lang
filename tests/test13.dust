// test_complete.dust - Comprehensive Dust language test
#include <stdio.h>
#include <stdint.h>
#include <stdbool.h>

// Test struct definition
struct Player {
    x_i;
    y_i;
    health_u32;
    name_cp;
    inventory_ia[10];
    active_bl;
};

// Test enum
enum GameState {
    MENU = 0,
    PLAYING = 1,
    PAUSED,
    GAME_OVER
};

// Test typedef
typedef dummy_u32 Score;

// Test function returning int
func add_i(a_i, b_i) {
    return a_i + b_i;
}

// Test function with array parameter
func sum_array_i(arr_ia, size_st) {
    let total_i = 0;
    for (let i_st = 0; i_st < size_st; i_st++) {
        total_i += arr_ia[i_st];
    }
    return total_i;
}

// Test function with struct pointer
func update_player_v(p_Playerp) {
    p_Playerp->x++;
    p_Playerp->y++;
    p_Playerp->health -= 10;
}

// Test all operators
func test_operators_v() {
    let a_i = 10;
    let b_i = 3;
    
    // Arithmetic
    let sum_i = a_i + b_i;
    let diff_i = a_i - b_i;
    let prod_i = a_i * b_i;
    let quot_i = a_i / b_i;
    let rem_i = a_i % b_i;
    
    // Bitwise
    let andd_i = a_i & b_i;
    let orr_i = a_i | b_i;
    let xor_i = a_i ^ b_i;
    let lshift_i = a_i << 2;
    let rshift_i = a_i >> 1;
    
    // Compound assignments
    a_i += 5;
    a_i -= 2;
    a_i *= 2;
    a_i /= 3;
    a_i &= 0xFF;
    a_i |= 0x10;
    a_i ^= 0x0F;
    a_i <<= 1;
    a_i >>= 1;
    
    // Increment/Decrement
    let pre_i = ++a_i;
    let post_i = b_i++;
    --a_i;
    b_i--;
    
    // Comparison
    let eq_bl = (a_i == b_i);
    let neq_bl = (a_i != b_i);
    let lt_bl = (a_i < b_i);
    let gt_bl = (a_i > b_i);
    let lte_bl = (a_i <= b_i);
    let gte_bl = (a_i >= b_i);
    
    // Logical
    let and_bl = (a_i > 5) && (b_i < 10);
    let or_bl = (a_i > 5) || (b_i < 10);
    let not_bl = !(a_i == b_i);
    
    // Ternary
    let max_i = (a_i > b_i) ? a_i : b_i;
    
    printf("Operators test complete\n");
}

// Test control flow
func test_control_flow_v() {
    let state_GameState = PLAYING_GameState;
    
    // Switch on enum
    switch (state_GameState) {
        case MENU_GameState:
            printf("In menu\n");
            break;
        case PLAYING_GameState:
            printf("Playing game\n");
            break;
        case PAUSED_GameState:
            printf("Game paused\n");
            break;
        case GAME_OVER_GameState:
            printf("Game over\n");
            break;
        default:
            printf("Unknown state\n");
    }
    
    // While loop
    let count_i = 0;
    while (count_i < 5) {
        count_i++;
    }
    
    // Do-while
    do {
        count_i--;
    } while (count_i > 0);
    
    // For loop
    for (let i_i = 0; i_i < 10; i_i++) {
        if (i_i == 5) {
            continue;
        }
        if (i_i == 8) {
            break;
        }
    }
}

// Test arrays and pointers
func test_arrays_v() {
    let numbers_ia[5] = {1, 2, 3, 4, 5};
    let buffer_u8a[256];
    let message_ca = "Hello, Dust!";
    
    // Array indexing
    numbers_ia[0] = 10;
    buffer_u8a[0] = 0xFF;
    
    // Pointer arithmetic
    let ptr_ip = &numbers_ia[0];
    let val_i = *ptr_ip;
    ptr_ip++;
    
    // String as char pointer
    let name_s = "Dust Language";
    let first_c = name_s[0];
}

func main_i() {
    printf("=== Dust Compiler Test Suite ===\n\n");
    
    // Test basic operations
    let result_i = add_i(5, 3);
    printf("add(5, 3) = %d\n", result_i);
    
    // Test struct
    let player_Player;
    player_Player.x = 100;
    player_Player.y = 200;
    player_Player.health = 100;
    player_Player.name = "Hero";
    player_Player.active = 1;
    
    printf("Player at (%d, %d) with %d health\n",player_Player.x, player_Player.y, player_Player.health);
    
    update_player_v(&player_Player);
    printf("After update: (%d, %d) with %d health\n",player_Player.x, player_Player.y, player_Player.health);
    
    // Test array operations
    let nums_ia[3] = {10, 20, 30};
    let sum_i = sum_array_i(nums_ia, 3);
    printf("Array sum: %d\n", sum_i);
    
    // Run test suites
    test_operators_v();
    test_control_flow();
}
