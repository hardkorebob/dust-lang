// test13.dust
// A test for advanced systems-programming features in Dust.
// This version is written in pure, idiomatic Dust, using the built-in types.

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
@c(puts(););
typedef func_ptr_fp isr_t_isr;

enum DeviceStatus {
    STATUS_OFFLINE = 0,
    STATUS_ONLINE = 1,
    STATUS_ERROR  = 5,
};

// Test the 'struct' keyword using the powerful, built-in OS suffixes.
// No typedefs needed! The compiler already knows what _pa, _irq, and _isr mean.
struct PCIDevice {
    status_u32;
    vendor_id_u16;
    mmio_base_u8;
    interrupt_line_irq;
    handler_isr;
};

// Test function for operator precedence.
func calculate_offset_i(base_i, offset_i, multiplier_i, divisor_i) {
    let result_i = (base_i + offset_i) * multiplier_i / divisor_i;
    return result_i;
}

// A stub for a fake Interrupt Service Routine.
func my_interrupt_handler_v() {
    @c(puts("Interrupt handler called!"))
}

// Main test function.
func main_i() {
    printf("--- Dust Advanced Systems Test ---\n");

    let my_device_PCIDevicep = cast_PCIDevicep(malloc(sizeof(PCIDevice)));

    printf("1. Testing Struct Initialization...\n");
    my_device_PCIDevicep->status = STATUS_ONLINE_i;
    my_device_PCIDevicep->vendor_id = 0x8086;
    my_device_PCIDevicep->mmio_base = 0xF0000000;
    my_device_PCIDevicep->interrupt_line = 9;
    my_device_PCIDevicep->handler = &my_interrupt_handler_v;
    
    printf(" Device MMIO base: 0x%lx\n", my_device_PCIDevicep->mmio_base);
    printf("   Device Status: %d\n", my_device_PCIDevicep->status);

    printf("\n2. Testing Operator Precedence...\n");
    let calculated_offset_i = calculate_offset_i(10, 20, 4, 2);
    printf("   (10 + 20) * 4 / 2 = %d (should be 60)\n", calculated_offset_i);

    printf("\n3. Testing Function Pointers...\n");
    if (my_device_PCIDevicep->handler != null) {
        printf("   Calling device ISR via function pointer...\n   ");
        my_device_PCIDevicep->handler();
    }

    free(my_device_PCIDevicep);

    printf("\n--- Test Complete ---\n");
    return 0;
}
